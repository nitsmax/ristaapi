<?php
/**
 * SaleItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nitsmax\Client
 * @author   http://github.com/nitsmax-api/nitsmax-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/nitsmax-api/nitsmax-codegen
 */

/**
 * Rista Platform API
 *
 * Rista Platform API provides resource oriented URLs to work with your business data. Our API uses [JSON](http://www.json.org) for request and response. API errors are returned using standard HTTP response codes.  You will need the following to work with your business data using API * A registered and active business with Rista. Not registered? [Get it now](https://play.google.com/store/apps/details?id=com.ristaapps.business), register and activate your business * Sales Enterprise and API licence for your business. You can purchase these licences from Account Menu * An active API Key and Secret Key for your business. Admin can create an API Key from Access Menu. * All API endpoints require API Key in `x-api-key` header and a [JWT](http://jwt.io/)(JSON Web Token) in `x-api-token` header  **You need to generate a new JWT api token for each request.**  Prerequisites * API Key and Secret Key for your business, if you don't have one request admin to create one from Access Menu * Active Sales Enterprise and API Licence  JWT has three parts (header.payload.signature), refer this [link](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html) to understand the specification and this [link](http://jwt.io/) to use a library to create a JWT  * header  ``` {\"alg\": \"HS256\", \"typ\": \"JWT\"} ```  Attribute | Description | Type | Required :-------: | ----------- | :--: | :-------: alg       | `HS256`(HMAC SHA-256) is the only supported algorithm. | string | Yes typ       | Type of token, use `JWT`      | string | Yes  * payload  ``` {\"iss\": \"Your API Key\", \"iat\": 1438167698, \"jti\": \"xyz_1438167698489\" } ```  Attribute   | Description                                                                          | Type    | Required :---------: | ------------------------------------------------------------------------------------ | :-----: | :-------: iss         | Issuer, populate with your API Key                                                   | string  | Yes iat         | Token issue time, time since epoch in **seconds**. Use JWT library to generate this. | integer | Yes jti         | JWT id to uniquely identify the request, **required** for `PUT,POST,DELETE` requests | string  | No  * signature  Using the selected algorithm for the API Key create a hash of combination of encoded header and payload.  ```  encodedString = base64UrlEncode(header) + \".\" + base64UrlEncode(payload) signature = HMACSHA256(encodedString, \"secret key\") //or signature = RSA256(encodedString, \"secret key\") ```  Generate a JWT and send it in **key** Header  ``` token = base64Encode(header) + \".\" + base64Encode(payload) + \".\" + signature curl -s -H \"x-api-key: Your API Key\" -H \"x-api-token: token\" https://api.ristaapps.com/v1/sale?invoice=123456 ```
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/nitsmax-api/nitsmax-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the nitsmax code generator program.
 * https://github.com/nitsmax-api/nitsmax-codegen
 * Do not edit the class manually.
 */

namespace Nitsmax\Client\Model;

use \ArrayAccess;

/**
 * SaleItems Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Nitsmax\Client
 * @author      http://github.com/nitsmax-api/nitsmax-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/nitsmax-api/nitsmax-codegen
 */
class SaleItems implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $nitsmaxModelName = 'Sale_items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $nitsmaxTypes = array(
        'short_name' => 'string',
        'long_name' => 'string',
        'variants' => 'string',
        'sku_code' => 'string',
        'bar_code' => 'string',
        'quantity' => 'float',
        'unit_price' => 'float',
        'measuring_unit' => 'string',
        'item_amount' => 'float',
        'option_amount' => 'float',
        'discount_amount' => 'float',
        'item_total_amount' => 'float',
        'tax_amount_included' => 'float',
        'tax_amount_excluded' => 'float',
        'options' => '\Nitsmax\Client\Model\SaleOptions[]',
        'discounts' => '\Nitsmax\Client\Model\SaleDiscounts[]',
        'taxes' => '\Nitsmax\Client\Model\SaleTaxes[]'
    );

    public static function nitsmaxTypes()
    {
        return self::$nitsmaxTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'short_name' => 'shortName',
        'long_name' => 'longName',
        'variants' => 'variants',
        'sku_code' => 'skuCode',
        'bar_code' => 'barCode',
        'quantity' => 'quantity',
        'unit_price' => 'unitPrice',
        'measuring_unit' => 'measuringUnit',
        'item_amount' => 'itemAmount',
        'option_amount' => 'optionAmount',
        'discount_amount' => 'discountAmount',
        'item_total_amount' => 'itemTotalAmount',
        'tax_amount_included' => 'taxAmountIncluded',
        'tax_amount_excluded' => 'taxAmountExcluded',
        'options' => 'options',
        'discounts' => 'discounts',
        'taxes' => 'taxes'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'short_name' => 'setShortName',
        'long_name' => 'setLongName',
        'variants' => 'setVariants',
        'sku_code' => 'setSkuCode',
        'bar_code' => 'setBarCode',
        'quantity' => 'setQuantity',
        'unit_price' => 'setUnitPrice',
        'measuring_unit' => 'setMeasuringUnit',
        'item_amount' => 'setItemAmount',
        'option_amount' => 'setOptionAmount',
        'discount_amount' => 'setDiscountAmount',
        'item_total_amount' => 'setItemTotalAmount',
        'tax_amount_included' => 'setTaxAmountIncluded',
        'tax_amount_excluded' => 'setTaxAmountExcluded',
        'options' => 'setOptions',
        'discounts' => 'setDiscounts',
        'taxes' => 'setTaxes'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'short_name' => 'getShortName',
        'long_name' => 'getLongName',
        'variants' => 'getVariants',
        'sku_code' => 'getSkuCode',
        'bar_code' => 'getBarCode',
        'quantity' => 'getQuantity',
        'unit_price' => 'getUnitPrice',
        'measuring_unit' => 'getMeasuringUnit',
        'item_amount' => 'getItemAmount',
        'option_amount' => 'getOptionAmount',
        'discount_amount' => 'getDiscountAmount',
        'item_total_amount' => 'getItemTotalAmount',
        'tax_amount_included' => 'getTaxAmountIncluded',
        'tax_amount_excluded' => 'getTaxAmountExcluded',
        'options' => 'getOptions',
        'discounts' => 'getDiscounts',
        'taxes' => 'getTaxes'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['long_name'] = isset($data['long_name']) ? $data['long_name'] : null;
        $this->container['variants'] = isset($data['variants']) ? $data['variants'] : null;
        $this->container['sku_code'] = isset($data['sku_code']) ? $data['sku_code'] : null;
        $this->container['bar_code'] = isset($data['bar_code']) ? $data['bar_code'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['measuring_unit'] = isset($data['measuring_unit']) ? $data['measuring_unit'] : null;
        $this->container['item_amount'] = isset($data['item_amount']) ? $data['item_amount'] : null;
        $this->container['option_amount'] = isset($data['option_amount']) ? $data['option_amount'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['item_total_amount'] = isset($data['item_total_amount']) ? $data['item_total_amount'] : null;
        $this->container['tax_amount_included'] = isset($data['tax_amount_included']) ? $data['tax_amount_included'] : null;
        $this->container['tax_amount_excluded'] = isset($data['tax_amount_excluded']) ? $data['tax_amount_excluded'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['discounts'] = isset($data['discounts']) ? $data['discounts'] : null;
        $this->container['taxes'] = isset($data['taxes']) ? $data['taxes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['short_name'] === null) {
            $invalid_properties[] = "'short_name' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalid_properties[] = "'quantity' can't be null";
        }
        if ($this->container['unit_price'] === null) {
            $invalid_properties[] = "'unit_price' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['short_name'] === null) {
            return false;
        }
        if ($this->container['quantity'] === null) {
            return false;
        }
        if ($this->container['unit_price'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets short_name
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     * @param string $short_name Short name of the item.
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets long_name
     * @return string
     */
    public function getLongName()
    {
        return $this->container['long_name'];
    }

    /**
     * Sets long_name
     * @param string $long_name Long name of the item.
     * @return $this
     */
    public function setLongName($long_name)
    {
        $this->container['long_name'] = $long_name;

        return $this;
    }

    /**
     * Gets variants
     * @return string
     */
    public function getVariants()
    {
        return $this->container['variants'];
    }

    /**
     * Sets variants
     * @param string $variants Item variant information.
     * @return $this
     */
    public function setVariants($variants)
    {
        $this->container['variants'] = $variants;

        return $this;
    }

    /**
     * Gets sku_code
     * @return string
     */
    public function getSkuCode()
    {
        return $this->container['sku_code'];
    }

    /**
     * Sets sku_code
     * @param string $sku_code Item SKU code.
     * @return $this
     */
    public function setSkuCode($sku_code)
    {
        $this->container['sku_code'] = $sku_code;

        return $this;
    }

    /**
     * Gets bar_code
     * @return string
     */
    public function getBarCode()
    {
        return $this->container['bar_code'];
    }

    /**
     * Sets bar_code
     * @param string $bar_code Item barcode.
     * @return $this
     */
    public function setBarCode($bar_code)
    {
        $this->container['bar_code'] = $bar_code;

        return $this;
    }

    /**
     * Gets quantity
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param float $quantity Item quantity.
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_price
     * @return float
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     * @param float $unit_price Item unit price.
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets measuring_unit
     * @return string
     */
    public function getMeasuringUnit()
    {
        return $this->container['measuring_unit'];
    }

    /**
     * Sets measuring_unit
     * @param string $measuring_unit Item measuring unit.
     * @return $this
     */
    public function setMeasuringUnit($measuring_unit)
    {
        $this->container['measuring_unit'] = $measuring_unit;

        return $this;
    }

    /**
     * Gets item_amount
     * @return float
     */
    public function getItemAmount()
    {
        return $this->container['item_amount'];
    }

    /**
     * Sets item_amount
     * @param float $item_amount Item amount.
     * @return $this
     */
    public function setItemAmount($item_amount)
    {
        $this->container['item_amount'] = $item_amount;

        return $this;
    }

    /**
     * Gets option_amount
     * @return float
     */
    public function getOptionAmount()
    {
        return $this->container['option_amount'];
    }

    /**
     * Sets option_amount
     * @param float $option_amount Item option amount.
     * @return $this
     */
    public function setOptionAmount($option_amount)
    {
        $this->container['option_amount'] = $option_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     * @return float
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     * @param float $discount_amount Item discount amount.
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets item_total_amount
     * @return float
     */
    public function getItemTotalAmount()
    {
        return $this->container['item_total_amount'];
    }

    /**
     * Sets item_total_amount
     * @param float $item_total_amount itemAmount + optionAmount + discountAmount
     * @return $this
     */
    public function setItemTotalAmount($item_total_amount)
    {
        $this->container['item_total_amount'] = $item_total_amount;

        return $this;
    }

    /**
     * Gets tax_amount_included
     * @return float
     */
    public function getTaxAmountIncluded()
    {
        return $this->container['tax_amount_included'];
    }

    /**
     * Sets tax_amount_included
     * @param float $tax_amount_included Item tax amount included in price.
     * @return $this
     */
    public function setTaxAmountIncluded($tax_amount_included)
    {
        $this->container['tax_amount_included'] = $tax_amount_included;

        return $this;
    }

    /**
     * Gets tax_amount_excluded
     * @return float
     */
    public function getTaxAmountExcluded()
    {
        return $this->container['tax_amount_excluded'];
    }

    /**
     * Sets tax_amount_excluded
     * @param float $tax_amount_excluded Item tax amount not included in price.
     * @return $this
     */
    public function setTaxAmountExcluded($tax_amount_excluded)
    {
        $this->container['tax_amount_excluded'] = $tax_amount_excluded;

        return $this;
    }

    /**
     * Gets options
     * @return \Nitsmax\Client\Model\SaleOptions[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \Nitsmax\Client\Model\SaleOptions[] $options Item options
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets discounts
     * @return \Nitsmax\Client\Model\SaleDiscounts[]
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     * @param \Nitsmax\Client\Model\SaleDiscounts[] $discounts Discounts at item level.
     * @return $this
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets taxes
     * @return \Nitsmax\Client\Model\SaleTaxes[]
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     * @param \Nitsmax\Client\Model\SaleTaxes[] $taxes Taxes at item level.
     * @return $this
     */
    public function setTaxes($taxes)
    {
        $this->container['taxes'] = $taxes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Nitsmax\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Nitsmax\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


