<?php
/**
 * SalesResultData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nitsmax\Client
 * @author   http://github.com/nitsmax-api/nitsmax-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/nitsmax-api/nitsmax-codegen
 */

/**
 * Rista Platform API
 *
 * Rista Platform API provides resource oriented URLs to work with your business data. Our API uses [JSON](http://www.json.org) for request and response. API errors are returned using standard HTTP response codes.  You will need the following to work with your business data using API * A registered and active business with Rista. Not registered? [Get it now](https://play.google.com/store/apps/details?id=com.ristaapps.business), register and activate your business * Sales Enterprise and API licence for your business. You can purchase these licences from Account Menu * An active API Key and Secret Key for your business. Admin can create an API Key from Access Menu. * All API endpoints require API Key in `x-api-key` header and a [JWT](http://jwt.io/)(JSON Web Token) in `x-api-token` header  **You need to generate a new JWT api token for each request.**  Prerequisites * API Key and Secret Key for your business, if you don't have one request admin to create one from Access Menu * Active Sales Enterprise and API Licence  JWT has three parts (header.payload.signature), refer this [link](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html) to understand the specification and this [link](http://jwt.io/) to use a library to create a JWT  * header  ``` {\"alg\": \"HS256\", \"typ\": \"JWT\"} ```  Attribute | Description | Type | Required :-------: | ----------- | :--: | :-------: alg       | `HS256`(HMAC SHA-256) is the only supported algorithm. | string | Yes typ       | Type of token, use `JWT`      | string | Yes  * payload  ``` {\"iss\": \"Your API Key\", \"iat\": 1438167698, \"jti\": \"xyz_1438167698489\" } ```  Attribute   | Description                                                                          | Type    | Required :---------: | ------------------------------------------------------------------------------------ | :-----: | :-------: iss         | Issuer, populate with your API Key                                                   | string  | Yes iat         | Token issue time, time since epoch in **seconds**. Use JWT library to generate this. | integer | Yes jti         | JWT id to uniquely identify the request, **required** for `PUT,POST,DELETE` requests | string  | No  * signature  Using the selected algorithm for the API Key create a hash of combination of encoded header and payload.  ```  encodedString = base64UrlEncode(header) + \".\" + base64UrlEncode(payload) signature = HMACSHA256(encodedString, \"secret key\") //or signature = RSA256(encodedString, \"secret key\") ```  Generate a JWT and send it in **key** Header  ``` token = base64Encode(header) + \".\" + base64Encode(payload) + \".\" + signature curl -s -H \"x-api-key: Your API Key\" -H \"x-api-token: token\" https://api.ristaapps.com/v1/sale?invoice=123456 ```
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/nitsmax-api/nitsmax-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the nitsmax code generator program.
 * https://github.com/nitsmax-api/nitsmax-codegen
 * Do not edit the class manually.
 */

namespace Nitsmax\Client\Model;

use \ArrayAccess;

/**
 * SalesResultData Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Nitsmax\Client
 * @author      http://github.com/nitsmax-api/nitsmax-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/nitsmax-api/nitsmax-codegen
 */
class SalesResultData implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $nitsmaxModelName = 'SalesResult_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $nitsmaxTypes = array(
        'branch_name' => 'string',
        'branch_code' => 'string',
        'invoice_number' => 'string',
        'invoice_date' => 'string',
        'item_amount' => 'float',
        'charge_amount' => 'float',
        'gross_amount' => 'float',
        'discount_amount' => 'float',
        'tax_amount' => 'float',
        'net_amount' => 'float',
        'round_off_amount' => 'float',
        'tip_amount' => 'float',
        'total_amount' => 'float',
        'customer_id' => 'string',
        'customer_name' => 'string',
        'sale_by' => 'string',
        'channel' => 'string',
        'label' => 'string'
    );

    public static function nitsmaxTypes()
    {
        return self::$nitsmaxTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'branch_name' => 'branchName',
        'branch_code' => 'branchCode',
        'invoice_number' => 'invoiceNumber',
        'invoice_date' => 'invoiceDate',
        'item_amount' => 'itemAmount',
        'charge_amount' => 'chargeAmount',
        'gross_amount' => 'grossAmount',
        'discount_amount' => 'discountAmount',
        'tax_amount' => 'taxAmount',
        'net_amount' => 'netAmount',
        'round_off_amount' => 'roundOffAmount',
        'tip_amount' => 'tipAmount',
        'total_amount' => 'totalAmount',
        'customer_id' => 'customerId',
        'customer_name' => 'customerName',
        'sale_by' => 'saleBy',
        'channel' => 'channel',
        'label' => 'label'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'branch_name' => 'setBranchName',
        'branch_code' => 'setBranchCode',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_date' => 'setInvoiceDate',
        'item_amount' => 'setItemAmount',
        'charge_amount' => 'setChargeAmount',
        'gross_amount' => 'setGrossAmount',
        'discount_amount' => 'setDiscountAmount',
        'tax_amount' => 'setTaxAmount',
        'net_amount' => 'setNetAmount',
        'round_off_amount' => 'setRoundOffAmount',
        'tip_amount' => 'setTipAmount',
        'total_amount' => 'setTotalAmount',
        'customer_id' => 'setCustomerId',
        'customer_name' => 'setCustomerName',
        'sale_by' => 'setSaleBy',
        'channel' => 'setChannel',
        'label' => 'setLabel'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'branch_name' => 'getBranchName',
        'branch_code' => 'getBranchCode',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_date' => 'getInvoiceDate',
        'item_amount' => 'getItemAmount',
        'charge_amount' => 'getChargeAmount',
        'gross_amount' => 'getGrossAmount',
        'discount_amount' => 'getDiscountAmount',
        'tax_amount' => 'getTaxAmount',
        'net_amount' => 'getNetAmount',
        'round_off_amount' => 'getRoundOffAmount',
        'tip_amount' => 'getTipAmount',
        'total_amount' => 'getTotalAmount',
        'customer_id' => 'getCustomerId',
        'customer_name' => 'getCustomerName',
        'sale_by' => 'getSaleBy',
        'channel' => 'getChannel',
        'label' => 'getLabel'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branch_name'] = isset($data['branch_name']) ? $data['branch_name'] : null;
        $this->container['branch_code'] = isset($data['branch_code']) ? $data['branch_code'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['item_amount'] = isset($data['item_amount']) ? $data['item_amount'] : null;
        $this->container['charge_amount'] = isset($data['charge_amount']) ? $data['charge_amount'] : null;
        $this->container['gross_amount'] = isset($data['gross_amount']) ? $data['gross_amount'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['net_amount'] = isset($data['net_amount']) ? $data['net_amount'] : null;
        $this->container['round_off_amount'] = isset($data['round_off_amount']) ? $data['round_off_amount'] : null;
        $this->container['tip_amount'] = isset($data['tip_amount']) ? $data['tip_amount'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['sale_by'] = isset($data['sale_by']) ? $data['sale_by'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['branch_name'] === null) {
            $invalid_properties[] = "'branch_name' can't be null";
        }
        if ($this->container['branch_code'] === null) {
            $invalid_properties[] = "'branch_code' can't be null";
        }
        if ($this->container['invoice_number'] === null) {
            $invalid_properties[] = "'invoice_number' can't be null";
        }
        if ($this->container['invoice_date'] === null) {
            $invalid_properties[] = "'invoice_date' can't be null";
        }
        if ($this->container['item_amount'] === null) {
            $invalid_properties[] = "'item_amount' can't be null";
        }
        if ($this->container['gross_amount'] === null) {
            $invalid_properties[] = "'gross_amount' can't be null";
        }
        if ($this->container['net_amount'] === null) {
            $invalid_properties[] = "'net_amount' can't be null";
        }
        if ($this->container['total_amount'] === null) {
            $invalid_properties[] = "'total_amount' can't be null";
        }
        if ($this->container['sale_by'] === null) {
            $invalid_properties[] = "'sale_by' can't be null";
        }
        if ($this->container['channel'] === null) {
            $invalid_properties[] = "'channel' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['branch_name'] === null) {
            return false;
        }
        if ($this->container['branch_code'] === null) {
            return false;
        }
        if ($this->container['invoice_number'] === null) {
            return false;
        }
        if ($this->container['invoice_date'] === null) {
            return false;
        }
        if ($this->container['item_amount'] === null) {
            return false;
        }
        if ($this->container['gross_amount'] === null) {
            return false;
        }
        if ($this->container['net_amount'] === null) {
            return false;
        }
        if ($this->container['total_amount'] === null) {
            return false;
        }
        if ($this->container['sale_by'] === null) {
            return false;
        }
        if ($this->container['channel'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets branch_name
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branch_name'];
    }

    /**
     * Sets branch_name
     * @param string $branch_name Name of the branch
     * @return $this
     */
    public function setBranchName($branch_name)
    {
        $this->container['branch_name'] = $branch_name;

        return $this;
    }

    /**
     * Gets branch_code
     * @return string
     */
    public function getBranchCode()
    {
        return $this->container['branch_code'];
    }

    /**
     * Sets branch_code
     * @param string $branch_code Branch code
     * @return $this
     */
    public function setBranchCode($branch_code)
    {
        $this->container['branch_code'] = $branch_code;

        return $this;
    }

    /**
     * Gets invoice_number
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     * @param string $invoice_number Unique identifier for a sale record
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     * @return string
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     * @param string $invoice_date Date of sale in ISO format with timezone (in branch timezone)
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets item_amount
     * @return float
     */
    public function getItemAmount()
    {
        return $this->container['item_amount'];
    }

    /**
     * Sets item_amount
     * @param float $item_amount Total item amount.
     * @return $this
     */
    public function setItemAmount($item_amount)
    {
        $this->container['item_amount'] = $item_amount;

        return $this;
    }

    /**
     * Gets charge_amount
     * @return float
     */
    public function getChargeAmount()
    {
        return $this->container['charge_amount'];
    }

    /**
     * Sets charge_amount
     * @param float $charge_amount Total charge amount.
     * @return $this
     */
    public function setChargeAmount($charge_amount)
    {
        $this->container['charge_amount'] = $charge_amount;

        return $this;
    }

    /**
     * Gets gross_amount
     * @return float
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     * @param float $gross_amount Gross sale amount.
     * @return $this
     */
    public function setGrossAmount($gross_amount)
    {
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     * @return float
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     * @param float $discount_amount Total discount amount.
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets tax_amount
     * @return float
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     * @param float $tax_amount Total tax amount.
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets net_amount
     * @return float
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     * @param float $net_amount Net sale amount.
     * @return $this
     */
    public function setNetAmount($net_amount)
    {
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets round_off_amount
     * @return float
     */
    public function getRoundOffAmount()
    {
        return $this->container['round_off_amount'];
    }

    /**
     * Sets round_off_amount
     * @param float $round_off_amount Round off amount.
     * @return $this
     */
    public function setRoundOffAmount($round_off_amount)
    {
        $this->container['round_off_amount'] = $round_off_amount;

        return $this;
    }

    /**
     * Gets tip_amount
     * @return float
     */
    public function getTipAmount()
    {
        return $this->container['tip_amount'];
    }

    /**
     * Sets tip_amount
     * @param float $tip_amount Tip amount.
     * @return $this
     */
    public function setTipAmount($tip_amount)
    {
        $this->container['tip_amount'] = $tip_amount;

        return $this;
    }

    /**
     * Gets total_amount
     * @return float
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     * @param float $total_amount Total sale amount.
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets customer_id
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     * @param string $customer_id Customer identifier.
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_name
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     * @param string $customer_name Customer name.
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets sale_by
     * @return string
     */
    public function getSaleBy()
    {
        return $this->container['sale_by'];
    }

    /**
     * Sets sale_by
     * @param string $sale_by Name of the user who performed this sale.
     * @return $this
     */
    public function setSaleBy($sale_by)
    {
        $this->container['sale_by'] = $sale_by;

        return $this;
    }

    /**
     * Gets channel
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     * @param string $channel Name of the price channel.
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label Service label e.g. Table 1.
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Nitsmax\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Nitsmax\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


